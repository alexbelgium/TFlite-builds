name: Build TFLite Runtime Wheels

on:
  workflow_dispatch:
  push:

env:
  TFLITE_VERSION: "2.17.1"
  BASE_IMAGE: "ubuntu:22.04"

jobs:
  build:
    runs-on: ubuntu-noble
    strategy:
      matrix:
        python_version: ["3.11"]
        arch: ["x86_64"]

    steps:
    - name: Setup Docker and Dependencies
      run: |
        sudo apt update
        #sudo apt remove -y docker.io containerd runc || true
        sudo apt remove -y llvm*
        sudo apt install -y build-essential lld git zip unzip pkg-config curl gcc-12
        #curl -fsSL https://get.docker.com | sudo sh
        wget -qO- https://apt.llvm.org/llvm.sh | sudo bash -s -- 17
        sudo ln -sf /usr/bin/clang-17 /usr/bin/clang
        echo "Clang version is $(clang-17 --version)"

    - name: Setup Docker and Dependencies
      run: |
        BRANCH=r2.16-tflite-build
        git clone -b ${BRANCH} --depth 1 https://github.com/PINTO0309/tensorflow.git
        cd tensorflow/lite/tools/pip_package
        
        make BASE_IMAGE=debian:bookworm PYTHON=python3 PYTHON_VERSION=3.11 TENSORFLOW_TARGET=aarch64 docker-build
        make BASE_IMAGE=debian:bookworm PYTHON=python3 PYTHON_VERSION=3.11 TENSORFLOW_TARGET=native docker-build
          
    - name: Prepare Wheel for Upload
      run: |
        mkdir -p /home/runner/work/wheels
        WHEEL_PATH=$(find tensorflow/lite/tools/pip_package/gen/tflite_pip/python${{ matrix.python_version }}/dist -name "*.whl" | head -n 1)
        if [[ -z "$WHEEL_PATH" ]]; then
          echo "Error: No wheel file found!"
          exit 1
        fi
        echo "PY_TAG=$(echo ${{ matrix.python_version }} | sed 's/\\.//g')" >> $GITHUB_ENV
        NEW_WHEEL_PATH="/home/runner/work/wheels/tflite_runtime-${{ env.TFLITE_VERSION }}${{ matrix.arch == 'x86_64-noavx' && '_noavx' || '' }}-cp${{ env.PY_TAG }}-cp${{ env.PY_TAG }}-linux_${{ matrix.arch == 'x86_64-noavx' && 'x86_64' || matrix.arch }}.whl"
        mv "$WHEEL_PATH" "$NEW_WHEEL_PATH"
        echo "Wheel created: $NEW_WHEEL_PATH"

    - name: List Built Wheels
      run: ls -l /home/runner/work/wheels

    - name: Verify Wheel Architectures
      run: file /home/runner/work/wheels/*.whl

    - name: Upload Wheel Artifact
      uses: actions/upload-artifact@v4
      with:
        name: tflite_runtime-${{ env.TFLITE_VERSION }}${{ matrix.arch == 'x86_64-noavx' && '_noavx' || '' }}-cp${{ env.PY_TAG }}-cp${{ env.PY_TAG }}-linux_${{ matrix.arch == 'x86_64-noavx' && 'x86_64' || matrix.arch }}
        path: /home/runner/work/wheels/*.whl

  release:
    runs-on: ubuntu-latest
    needs: build
    name: Create and Upload Release
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: wheels

      - name: List Downloaded Wheels
        run: find wheels

      - name: Authenticate GitHub CLI
        run: gh auth status
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release (if not exists)
        run: |
          if gh release view ${{ env.TFLITE_VERSION }}2 -R "${{ github.repository }}" > /dev/null 2>&1; then
            echo "Release already exists. Skipping creation."
          else
            gh release create ${{ env.TFLITE_VERSION }}2 \
              -R "${{ github.repository }}" \
              --title "tflite_runtime ${{ env.TFLITE_VERSION }}" \
              --notes "Automated build for tflite_runtime ${{ env.TFLITE_VERSION }}"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Wheels to GitHub Release
        run: |
          gh release upload ${{ env.TFLITE_VERSION }} wheels/**/*.whl --clobber -R "${{ github.repository }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
