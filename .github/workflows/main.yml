name: Build TFLite Runtime Wheels on Debian Bookworm

on:
  workflow_dispatch:
  push:

env:
  TFLITE_VERSION: "2.17.1"

jobs:
  build:
    runs-on: ubuntu-latest
    container:
      image: debian:bookworm

    strategy:
      matrix:
        python_version: ["3.11"]
        arch: ["aarch64"]

    steps:
    - name: Set up system dependencies
      run: |
        apt-get update
        # Install core dependencies including Python and build tools
        apt-get install -y \
          curl git unzip zip pkg-config wget \
          build-essential lld python3-pip python3-venv python3-dev gnupg

        # Add LLVM repository for clang-17 installation
        wget -qO- https://apt.llvm.org/llvm.sh | bash -s -- 17
        apt-get install -y clang-17 llvm-17

        # Set clang-17 as default
        ln -sf /usr/bin/clang-17 /usr/bin/clang
        ln -sf /usr/bin/clang++-17 /usr/bin/clang++

        echo "Clang version: $(clang --version)"

        # Install Bazel from the official repository (Note: this repo is configured for amd64)
        curl -fsSL https://bazel.build/bazel-release.pub.gpg | gpg --dearmor > /usr/share/keyrings/bazel.gpg
        echo "deb [arch=amd64 signed-by=/usr/share/keyrings/bazel.gpg] https://storage.googleapis.com/bazel-apt stable jdk1.8" > /etc/apt/sources.list.d/bazel.list
        apt-get update && apt-get install -y bazel

    - name: Checkout TensorFlow
      uses: actions/checkout@v4
      with:
        repository: tensorflow/tensorflow
        submodules: true
        fetch-depth: 0
        ref: v${{ env.TFLITE_VERSION }}

    - name: Create and activate virtual environment
      run: |
        python3 -m venv /tmp/tflite_env
        source /tmp/tflite_env/bin/activate
        pip install --upgrade pip wheel numpy==1.26.4 auditwheel setuptools

    - name: Build TFLite Runtime Wheel
      run: |
        source /tmp/tflite_env/bin/activate
        export PYTHON_VERSION="${{ matrix.python_version }}"
        export NUMPY_VERSION="1.24.4"
        export TENSORFLOW_TARGET="${{ matrix.arch }}"
        export CC=clang
        export CXX=clang++

        # Initialize CUSTOM_BAZEL_FLAGS
        CUSTOM_BAZEL_FLAGS=""

        # Enable XNNPACK & Flex
        CUSTOM_BAZEL_FLAGS+="--define=tflite_pip_with_xnnpack=true --define=tflite_pip_with_xnnpack_reshaping=true "
        CUSTOM_BAZEL_FLAGS+="--define=tflite_pip_with_flex=true "
        # Increase speed
        CUSTOM_BAZEL_FLAGS+="--define xnnpack_force_float_precision=fp16 "
        # Reduce size
        CUSTOM_BAZEL_FLAGS+="--define=no_tensorflow_py_deps=true --strip=always "
        # Fix build issues
        CUSTOM_BAZEL_FLAGS+="--features=-layering_check "

        if [[ "${{ matrix.arch }}" == "aarch64" ]]; then
          TARGET_ARCH="aarch64"
          # For native aarch64 builds, ensure your build rules support cross-compilation if needed.
        else
          # For non-aarch64, remove AVX support and fix build
          CUSTOM_BAZEL_FLAGS+="--copt=-mno-avx --copt=-mno-avx2 --copt=-msse4.2 --copt=-msse4.1 "
          CUSTOM_BAZEL_FLAGS+="--copt=-Wno-gnu-offsetof-extensions "
          TARGET_ARCH="native"
        fi

        export CUSTOM_BAZEL_FLAGS
        export TF_PYTHON_VERSION="${{ matrix.python_version }}"

        # Inject a clean command into the build script to avoid caching issues.
        sed -i "/^bazel/i\bazel clean --expunge" tensorflow/lite/tools/pip_package/build_pip_package_with_bazel.sh

        # Build the pip package with Bazel.
        ./tensorflow/lite/tools/pip_package/build_pip_package_with_bazel.sh

    - name: Prepare Wheel for Upload
      run: |
        mkdir -p /home/runner/work/wheels
        WHEEL_PATH=$(find tensorflow/lite/tools/pip_package/gen/tflite_pip/python3/dist -name "*.whl" | head -n 1)
        if [[ -z "$WHEEL_PATH" ]]; then
          echo "Error: No wheel file found!"
          exit 1
        fi

        echo "PY_TAG=$(echo ${{ matrix.python_version }} | sed 's/\\.//g')" >> $GITHUB_ENV
        NEW_WHEEL_PATH="/home/runner/work/wheels/tflite_runtime-${{ env.TFLITE_VERSION }}${{ matrix.arch == 'x86_64-noavx' && '_noavx' || '' }}-cp${{ env.PY_TAG }}-cp${{ env.PY_TAG }}-linux_${{ matrix.arch == 'x86_64-noavx' && 'x86_64' || matrix.arch }}.whl"
        mv "$WHEEL_PATH" "$NEW_WHEEL_PATH"
        echo "Wheel created: $NEW_WHEEL_PATH"

    - name: List Built Wheels
      run: ls -l /home/runner/work/wheels

    - name: Verify Wheel Architectures
      run: file /home/runner/work/wheels/*.whl

    - name: Upload Wheel Artifact
      uses: actions/upload-artifact@v4
      with:
        name: "tflite_runtime-${{ env.TFLITE_VERSION }}${{ matrix.arch == 'x86_64-noavx' && '_noavx' || '' }}-cp${{ env.PY_TAG }}-cp${{ env.PY_TAG }}-linux_${{ matrix.arch == 'x86_64-noavx' && 'x86_64' || matrix.arch }}"
        path: /home/runner/work/wheels/*.whl

  release:
    runs-on: ubuntu-latest
    needs: build
    name: Create and Upload Release
    steps:
      - name: Install GitHub CLI
        run: |
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install -y gh

      - name: Check out repository
        uses: actions/checkout@v4

      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: wheels

      - name: List Downloaded Wheels
        run: find wheels

      - name: Authenticate GitHub CLI
        run: gh auth status
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release (if not exists)
        run: |
          if gh release view ${{ env.TFLITE_VERSION }}2 -R "${{ github.repository }}" > /dev/null 2>&1; then
            echo "Release already exists. Skipping creation."
          else
            gh release create ${{ env.TFLITE_VERSION }}2 \
              -R "${{ github.repository }}" \
              --title "tflite_runtime ${{ env.TFLITE_VERSION }}" \
              --notes "Automated build for tflite_runtime ${{ env.TFLITE_VERSION }}"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Wheels to GitHub Release
        run: |
          gh release upload ${{ env.TFLITE_VERSION }}2 wheels/**/*.whl --clobber -R "${{ github.repository }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
