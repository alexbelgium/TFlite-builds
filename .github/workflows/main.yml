name: Build TFLite Runtime Wheels

on:
  workflow_dispatch:
  push:

jobs:
  build:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        python_version: ["3.9", "3.10", "3.11", "3.12"]
        arch: ["amd64", "aarch64"]

    steps:
    - name: Checkout TensorFlow
      uses: actions/checkout@v4
      with:
        repository: tensorflow/tensorflow
        submodules: true
        fetch-depth: 0
        ref: v2.17.1

    - name: Setup Docker and Dependencies
      run: |
        sudo apt update
        sudo apt remove -y docker.io containerd runc || true
        sudo apt install -y build-essential lld git zip unzip pkg-config curl gcc-12
        curl -fsSL https://get.docker.com | sudo sh
        wget -qO- https://apt.llvm.org/llvm.sh | sudo bash -s -- 17
        sudo ln -sf /usr/bin/clang-17 /usr/bin/clang
        echo "Clang version is $(clang-17 --version)"

    - name: Adjust Dockerfile
      run: |
        sed -i 's/3.16.8/3.29.6/g' tensorflow/lite/tools/pip_package/Dockerfile.py3
        if [[ "${{ matrix.python_version }}" == "3.11" || "${{ matrix.python_version }}" == "3.12" ]]; then
          sed -i '/RUN curl -OL https:\/\/bootstrap.pypa.io\/get-pip.py/a\    RUN rm /usr/lib/python$PYTHON_VERSION/EXTERNALLY-MANAGED' tensorflow/lite/tools/pip_package/Dockerfile.py3
        fi

    - name: Configure Makefile
      run: |
        sed -i 's/ubuntu:20.04/ubuntu:22.04/g' tensorflow/lite/tools/pip_package/Makefile
        if [[ "${{ matrix.python_version }}" == "3.12" ]]; then
          sed -i 's/^NUMPY_VERSION.*/NUMPY_VERSION ?= 1.26.4/' tensorflow/lite/tools/pip_package/Makefile
        else
          sed -i 's/^NUMPY_VERSION.*/NUMPY_VERSION ?= 1.24.4/' tensorflow/lite/tools/pip_package/Makefile
        fi

    - name: Build TFLite Runtime Wheel using Docker
      run: |
        export BASE_IMAGE="ubuntu:22.04"
        export PYTHON_VERSION="${{ matrix.python_version }}"
        if [[ "${{ matrix.python_version }}" == "3.12" ]]; then
          export NUMPY_VERSION="1.26.4"
        else
          export NUMPY_VERSION="1.24.4"
        fi
        export TENSORFLOW_TARGET="${{ matrix.arch }}"
        export CUSTOM_BAZEL_FLAGS="--define=tflite_pip_with_xnnpack=true --define=tflite_pip_with_xnnpack_reshaping=true"

        BUILD_NUM_JOBS=$(nproc) make -C tensorflow/lite/tools/pip_package docker-build \
          TENSORFLOW_TARGET=$TENSORFLOW_TARGET PYTHON_VERSION=$PYTHON_VERSION CUSTOM_BAZEL_FLAGS="$CUSTOM_BAZEL_FLAGS"

    - name: Upload TFLite Wheel
      uses: actions/upload-artifact@v4
      with:
        name: tflite_runtime-2.17.1-cp${{ matrix.python_version }}-cp${{ matrix.python_version }}-linux_${{ matrix.arch }}.whl
        path: tensorflow/lite/tools/pip_package/gen/tflite_pip/python/dist/*.whl

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v2.17.1
        name: "TensorFlow Lite Runtime 2.17.1 Release"
        body: |
          This release includes pre-built TensorFlow Lite runtime wheels for the following configurations:
          - **TFLite Version:** 2.17.1
          - **Architectures:** amd64, aarch64
          - **Python Versions:** 3.9, 3.10, 3.11, 3.12
          - **Custom Bazel Flags:**
            - `--define=tflite_pip_with_xnnpack=true`
            - `--define=tflite_pip_with_xnnpack_reshaping=true`

          These wheels are built with XNNPACK optimizations and reshaping support.
        files: tensorflow/lite/tools/pip_package/gen/tflite_pip/python/dist/*.whl
